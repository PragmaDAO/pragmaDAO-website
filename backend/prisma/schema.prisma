// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  username  String   @unique
  email     String   @unique // Add email field
  password  String?  // Make password optional for social logins
  googleId  String?  @unique // Add googleId
  githubId  String?  @unique // Add githubId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  progress  UserLessonProgress[]
  submittedCode UserSubmittedCode[] @relation("UserSubmissions") // Explicitly name the relation
}

model UserLessonProgress {
  id        String   @id @default(uuid())
  userId    String
  lessonId  String
  completed Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, lessonId])
}

model UserSubmittedCode {
  id             String   @id @default(uuid())
  userId         String
  lessonId       String
  code           String   @db.Text // Use @db.Text for potentially large code strings
  submissionTime DateTime @default(now())
  testResults    Json?    // Store JSON output of test results
  passed         Boolean? // Whether the submission passed all tests

  user           User     @relation("UserSubmissions", fields: [userId], references: [id]) // Link to the named relation
  @@index([userId, lessonId]) // Add an index for faster lookups
}